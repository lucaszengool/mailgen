/** * Modern Email Templates - Professional CRM Style * Based on research of HubSpot, Salesforce, and Pipedrive designs */ class ModernEmailTemplates { constructor() { this.baseStyles = { container: ` font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #f9f9f9; color: #2d3748; line-height: 1.6; `, header: ` background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); padding: 32px; text-align: center; border-radius: 12px 12px 0 0; `, content: ` padding: 32px; background: #f9f9f9; `, footer: ` padding: 24px 32px; background: #f7fafc; border-top: 1px solid #e2e8f0; border-radius: 0 0 12px 12px; ` }; } /** * Fix hardcoded email addresses and personalization issues */ getPersonalizedGreeting(prospect) { // Extract name from email if name is not provided const name = prospect.name || this.extractNameFromEmail(prospect.email); return `Hi ${name}`; } extractNameFromEmail(email) { if (!email) return 'there'; const localPart = email.split('@')[0]; // Convert formats like john.doe or john_doe to John const name = localPart.split(/[._-]/)[0]; return name.charAt(0).toUpperCase() + name.slice(1); } /** * Generate appropriate CTA based on user configuration */ getCallToAction(templateData) { const bookingUrl = templateData?.bookingUrl; const companyWebsite = templateData?.companyWebsite || (templateData?.senderEmail?.split('@')[1] ? `https://${templateData.senderEmail.split('@')[1]}` : 'https://your-website.com'); if (bookingUrl) { return { text: 'Schedule a Call', url: bookingUrl, description: '15-minute strategy session' }; } else { return { text: 'Visit Our Website', url: companyWebsite, description: 'Explore our solutions' }; } } /** * Generate unique email using Ollama content + sophisticated HTML template */ generateUniquePersonalizedEmail(prospect, businessAnalysis, templateData, ollamaContent, templateType = 'partnership_outreach') { // Route to specific sophisticated template based on user selection switch (templateType) { case 'initial_contact': return this.generateInitialContact(prospect, businessAnalysis, templateData, ollamaContent); case 'cold_outreach': return this.generateColdOutreach(prospect, businessAnalysis, templateData, ollamaContent); case 'value_demonstration': return this.generateValueDemonstration(prospect, businessAnalysis, templateData, ollamaContent); case 'follow_up': return this.generateFollowUp(prospect, businessAnalysis, templateData, ollamaContent); case 'problem_solution': return this.generateProblemSolution(prospect, businessAnalysis, templateData, ollamaContent); case 'partnership_outreach': default: return this.generatePartnershipOutreach(prospect, businessAnalysis, templateData, ollamaContent); } } generateUniquePersonalizedEmailLegacy(prospect, businessAnalysis, templateData, ollamaContent) { const greeting = this.getPersonalizedGreeting(prospect); const prospectCompany = prospect.company || this.extractCompanyFromEmail(prospect.email); const cta = this.getCallToAction(templateData); const senderInfo = this.getProperSenderInfo(templateData, businessAnalysis); // Extract subject and body from Ollama content let customSubject = `Partnership opportunity with ${senderInfo.companyName}`; let customContent = `I've been following ${prospectCompany}'s impressive work and believe there's a natural partnership opportunity between our companies.`; let customValuePoints = [ 'Accelerated growth through proven strategies', 'Enhanced operational efficiency', 'Access to innovative solutions and resources' ]; if (ollamaContent && typeof ollamaContent === 'string') { // Extract subject line const subjectMatch = ollamaContent.match(/SUBJECT:\s*(.+)/i); if (subjectMatch && subjectMatch[1].trim()) { customSubject = subjectMatch[1].trim(); } // Extract main email content const emailMatch = ollamaContent.match(/EMAIL:\s*([\s\S]+?)(?:\n\nBest regards|$)/i); if (emailMatch && emailMatch[1].trim()) { const emailBody = emailMatch[1].trim() .replace(/Hi [^,]+,?\s*/i, '') // Remove greeting as we'll add it back .replace(/Best regards[\s\S]*$/i, '') // Remove signature .trim(); if (emailBody.length > 20) { customContent = emailBody; // Extract value points if present const bulletPoints = emailBody.match(/[•·\-]\s*([^•·\-\n]+)/g); if (bulletPoints && bulletPoints.length >= 2) { customValuePoints = bulletPoints.slice(0, 3).map(point => point.replace(/[•·\-]\s*/, '').trim() ); } } } } // Generate sophisticated HTML email with unique content const body = `
<!DOCTYPE html>
<html>
<head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>${customSubject}</title>
</head>
<body style="margin: 0; padding: 20px; background-color: #f8fafc; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;"> <div style="max-width: 600px; margin: 0 auto; background: #f9f9f9; border-radius: 16px; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08); overflow: hidden;"> <!-- Premium Header --> <div style="background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); padding: 40px 32px; text-align: center; position: relative;"> <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><defs><pattern id=\"grain\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\"><circle cx=\"50\" cy=\"50\" r=\"1\" fill=\"white\" opacity=\"0.1\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23grain)\"/></svg>') repeat;"></div> <div style="position: relative; z-index: 1;"> <h1 style="color: #333333; margin: 0 0 12px 0; font-size: 28px; font-weight: 700; text-shadow: 0 2px 4px rgba(0,0,0,0.3);"> ${senderInfo.companyName} Partnership </h1> <div style="background: #f5f5f5; backdrop-filter: blur(10px); border-radius: 20px; padding: 8px 16px; display: inline-block;"> <p style="color: #ffffff; margin: 0; font-size: 16px; font-weight: 500;"> Exclusive Collaboration Opportunity </p> </div> </div> </div> <!-- Content --> <div style="padding: 40px 32px;"> <div style="margin-bottom: 32px;"> <p style="font-size: 18px; line-height: 1.7; color: #2d3748; margin: 0 0 24px 0; font-weight: 500;"> ${greeting}, </p> <div style="font-size: 16px; line-height: 1.8; color: #4a5568; margin: 0;"> ${customContent.split('\n').map(paragraph => `<p style="margin: 0 0 18px 0;">${paragraph.trim()}</p>` ).join('')} </div> </div> <!-- Enhanced Value Proposition --> <div style="background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%); border: 1px solid #e0f2fe; border-radius: 16px; padding: 32px; margin: 32px 0; position: relative; overflow: hidden;"> <div style="position: absolute; top: -50px; right: -50px; width: 100px; height: 100px; background: linear-gradient(135deg, #0ea5e9, #3b82f6); border-radius: 50%; opacity: 0.1;"></div> <h3 style="color: #0c4a6e; margin: 0 0 20px 0; font-size: 20px; font-weight: 700;"> What this partnership could deliver for ${prospectCompany}: </h3> <div style="color: #075985; font-size: 16px; line-height: 1.6;"> ${customValuePoints.map(point => ` <div style="margin-bottom: 16px; "> <div style="width: 24px; height: 24px; background: linear-gradient(135deg, #0ea5e9, #3b82f6); border-radius: 50%; margin-right: 16px; margin-top: 2px;"> <div style="width: 8px; height: 8px; background: #f9f9f9; border-radius: 50%;"></div> </div> <span style="font-weight: 500;">${point}</span> </div> `).join('')} </div> </div> <!-- Metrics Section --> <div style="background: linear-gradient(135deg, #fef3c7 0%, #fcd34d 100%); border-radius: 12px; padding: 24px; margin: 24px 0; text-align: center;"> <div style="display: table; width: 100%; table-layout: fixed;"> <div style="display: table-cell; width: 50%; padding-right: 12px;"> <div style="color: #92400e; font-size: 32px; font-weight: 800; margin-bottom: 4px;">150%</div> <div style="color: #a16207; font-size: 14px; font-weight: 600;">Average Growth</div> </div> <div style="display: table-cell; width: 50%; padding-left: 12px; border-left: 2px solid #fbbf24;"> <div style="color: #92400e; font-size: 32px; font-weight: 800; margin-bottom: 4px;">30 Days</div> <div style="color: #a16207; font-size: 14px; font-weight: 600;">To See Results</div> </div> </div> </div> <!-- Premium CTA --> <div style="text-align: center; margin: 40px 0;"> <a href="${cta.url}" style="background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); color: #ffffff; padding: 18px 36px; border-radius: 12px; text-decoration: none; font-weight: 700; font-size: 16px; display: inline-block; box-shadow: 0 8px 25px rgba(76, 175, 80, 0.4); transition: all 0.3s ease; border: none; cursor: pointer;"> ${cta.text} </a> <p style="color: #333333; font-size: 14px; margin: 16px 0 0 0; font-style: italic;"> ${cta.description} </p> </div> </div> <!-- Premium Footer --> <div style="padding: 32px; background: #f5f5f5; border-top: 1px solid #e0e0e0;"> <div style="text-align: left; color: #666666; font-size: 15px; line-height: 1.5;"> <div style="font-weight: 700; color: #333333; margin-bottom: 6px; font-size: 16px;"> ${senderInfo.senderName} </div> <div style="font-weight: 600; color: #555555; margin-bottom: 8px;"> ${senderInfo.companyName} </div> <div style="margin-top: 12px;"> <a href="https://${senderInfo.website}" style="color: #4CAF50; text-decoration: none; font-weight: 600; border-bottom: 1px solid #4CAF50;"> ${senderInfo.website} </a> </div> </div> </div> </div> </body>
</html>`; return { subject: customSubject, body }; } /** * Fix sender attribution issues */ getProperSenderInfo(templateData, businessAnalysis) { // Use SMTP config data from frontend (priority: templateData -> businessAnalysis -> hardcoded fallback) const senderEmail = templateData?.senderEmail || templateData?.username || businessAnalysis?.senderEmail || 'team@your-company.com'; const senderName = templateData?.senderName || businessAnalysis?.senderName || 'FruitAI Team'; const companyName = templateData?.companyName || businessAnalysis?.companyName || 'FruitAI'; const website = templateData?.companyWebsite || businessAnalysis?.website || (templateData?.senderEmail?.split('@')[1] ? `https://${templateData.senderEmail.split('@')[1]}` : 'https://your-website.com'); console.log(` getProperSenderInfo - Using sender: ${senderName} <${senderEmail}>, website: ${website}`); return { senderEmail, senderName, companyName, website: website.replace(/^https?:\/\//, '') // Remove protocol for display }; } /** * Partnership Outreach Template - HubSpot Style */ generatePartnershipOutreach(prospect, businessAnalysis, templateData, ollamaContent = null) { const greeting = this.getPersonalizedGreeting(prospect); const prospectCompany = prospect.company || this.extractCompanyFromEmail(prospect.email); const cta = this.getCallToAction(templateData); const senderInfo = this.getProperSenderInfo(templateData, businessAnalysis); // Extract personalized content from Ollama if available let customValuePoints = [ 'Accelerated growth through proven AI strategies', 'Enhanced operational efficiency with smart automation', 'Access to cutting-edge technology solutions' ]; // Parse Ollama content for custom value points if available if (ollamaContent && typeof ollamaContent === 'object') { if (ollamaContent.valuePoints && Array.isArray(ollamaContent.valuePoints)) { customValuePoints = ollamaContent.valuePoints.slice(0, 3); } } const subject = `Partnership opportunity with ${senderInfo.companyName}`; // Gmail-optimized HTML template with inline styles only const body = `
<!DOCTYPE html>
<html>
<head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>${subject}</title>
</head>
<body style="margin: 0; padding: 0; background-color: #f5f5f5; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;"> <table width="100%" cellpadding="0" cellspacing="0" style="background-color: #f5f5f5; padding: 20px 0;"> <tr> <td align="center"> <table width="600" cellpadding="0" cellspacing="0" style="background-color: #fafafa; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1);"> <!-- Header with solid background (no gradient for Gmail) --> <tr> <td style="background-color: #4CAF50; padding: 40px 30px; text-align: center;"> <h1 style="color: #ffffff; margin: 0; font-size: 28px; font-weight: bold; font-family: Arial, sans-serif;"> Partnership Opportunity </h1> <p style="color: #333333; margin: 10px 0 0 0; font-size: 18px; font-family: Arial, sans-serif;"> ${senderInfo.companyName} × ${prospectCompany} </p> </td> </tr> <!-- Main Content --> <tr> <td style="padding: 40px 30px;"> <p style="font-size: 16px; line-height: 1.6; color: #333333; margin: 0 0 20px 0; font-family: Arial, sans-serif;"> ${greeting}, </p> <p style="font-size: 16px; line-height: 1.6; color: #555555; margin: 0 0 20px 0; font-family: Arial, sans-serif;"> I've been following <strong>${prospectCompany}'s</strong> impressive work in the industry. Your approach to innovation aligns perfectly with what we're building at ${senderInfo.companyName}. </p> <p style="font-size: 16px; line-height: 1.6; color: #555555; margin: 0 0 30px 0; font-family: Arial, sans-serif;"> We've helped similar companies achieve <strong>remarkable results</strong> through strategic collaboration, and I believe we could create something exceptional together. </p> <!-- Value Proposition Box --> <table width="100%" cellpadding="0" cellspacing="0" style="margin: 30px 0;"> <tr> <td style="background-color: #f5f5f5; border: 2px solid #4CAF50; border-radius: 8px; padding: 25px;"> <h3 style="color: #333333; margin: 0 0 20px 0; font-size: 20px; font-weight: bold; font-family: Arial, sans-serif;"> What this partnership could deliver for ${prospectCompany}: </h3> <table width="100%" cellpadding="0" cellspacing="0"> ${customValuePoints.map(point => ` <tr> <td style="padding: 8px 0;"> <table cellpadding="0" cellspacing="0"> <tr> <td style="width: 30px; vertical-align: top;"> <span style="display: inline-block; width: 24px; height: 24px; background-color: #4CAF50; border-radius: 12px; text-align: center; line-height: 24px; color: #ffffff; font-size: 14px; font-weight: bold;"></span> </td> <td style="font-size: 15px; line-height: 1.5; color: #333333; font-family: Arial, sans-serif;"> <strong>${point}</strong> </td> </tr> </table> </td> </tr> `).join('')} </table> </td> </tr> </table> <!-- Success Metrics --> <table width="100%" cellpadding="0" cellspacing="0" style="margin: 30px 0; background-color: #f5f5f5; border-radius: 8px; padding: 20px;"> <tr> <td align="center"> <table width="100%" cellpadding="0" cellspacing="0"> <tr> <td width="50%" style="text-align: center; padding: 10px;"> <div style="font-size: 36px; font-weight: bold; color: #4CAF50; font-family: Arial, sans-serif;">87%</div> <div style="font-size: 14px; color: #666666; margin-top: 5px; font-family: Arial, sans-serif;">Average Growth Rate</div> </td> <td width="50%" style="text-align: center; padding: 10px; border-left: 2px solid #e0e0e0;"> <div style="font-size: 36px; font-weight: bold; color: #4CAF50; font-family: Arial, sans-serif;">30 Days</div> <div style="font-size: 14px; color: #666666; margin-top: 5px; font-family: Arial, sans-serif;">To First Results</div> </td> </tr> </table> </td> </tr> </table> <!-- CTA Button --> <table width="100%" cellpadding="0" cellspacing="0" style="margin: 35px 0;"> <tr> <td align="center"> <a href="${cta.url}" style="display: inline-block; padding: 16px 40px; background-color: #4CAF50; color: #ffffff; text-decoration: none; font-size: 16px; font-weight: bold; border-radius: 8px; font-family: Arial, sans-serif;"> ${cta.text} </a> <p style="color: #666666; font-size: 14px; margin: 15px 0 0 0; font-style: italic; font-family: Arial, sans-serif;"> ${cta.description} </p> </td> </tr> </table> <p style="font-size: 16px; line-height: 1.6; color: #555555; margin: 30px 0 0 0; font-family: Arial, sans-serif;"> I'd love to explore how this partnership could work for both our companies. Are you available for a brief call this week? </p> </td> </tr> <!-- Footer --> <tr> <td style="background-color: #f5f5f5; padding: 30px; border-top: 1px solid #e0e0e0;"> <table width="100%" cellpadding="0" cellspacing="0"> <tr> <td> <p style="margin: 0; font-size: 16px; font-weight: bold; color: #333333; font-family: Arial, sans-serif;"> ${senderInfo.senderName} </p> <p style="margin: 5px 0; font-size: 15px; color: #666666; font-family: Arial, sans-serif;"> ${senderInfo.companyName} </p> <p style="margin: 10px 0 0 0;"> <a href="https://${senderInfo.website}" style="color: #4CAF50; text-decoration: none; font-size: 14px; font-family: Arial, sans-serif;"> ${senderInfo.website} </a> </p> </td> </tr> </table> </td> </tr> </table> </td> </tr> </table> </body>
</html>`; return { subject, body, template_type: 'partnership_outreach', personalization_level: 'high' }; } /** * Initial Contact Template - Sophisticated Design */ generateInitialContact(prospect, businessAnalysis, templateData, ollamaContent) { const greeting = this.getPersonalizedGreeting(prospect); const prospectCompany = prospect.company || this.extractCompanyFromEmail(prospect.email); const cta = this.getCallToAction(templateData); const senderInfo = this.getProperSenderInfo(templateData, businessAnalysis); let customSubject = `Quick question about ${prospectCompany}'s growth`; let customContent = `I hope this email finds you well. I've been researching companies in your industry and came across ${prospectCompany}.`; if (ollamaContent && typeof ollamaContent === 'string') { const subjectMatch = ollamaContent.match(/SUBJECT:\s*(.+)/i); if (subjectMatch && subjectMatch[1].trim()) { customSubject = subjectMatch[1].trim(); } const emailMatch = ollamaContent.match(/EMAIL:\s*([\s\S]+?)(?:\n\nBest regards|$)/i); if (emailMatch && emailMatch[1].trim()) { customContent = emailMatch[1].trim() .replace(/Hi [^,]+,?\s*/i, '') .replace(/Best regards[\s\S]*$/i, '') .trim(); } } const body = `
<!DOCTYPE html>
<html>
<head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>${customSubject}</title>
</head>
<body style="margin: 0; padding: 20px; background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%); font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;"> <div style="max-width: 600px; margin: 0 auto; background: #f9f9f9; border-radius: 20px; box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1); overflow: hidden;"> <!-- Elegant Header --> <div style="background: linear-gradient(135deg, #5a5a5a 0%, #6a6a6a 100%); padding: 50px 40px; text-align: center; position: relative;"> <div style="position: absolute; top: 0; left: 0; right: 0; height: 3px; background: linear-gradient(90deg, #4CAF50, #4CAF50, #4CAF50);"></div> <h1 style="color: #ffffff; margin: 0; font-size: 24px; font-weight: 300; letter-spacing: 1px;"> Initial Connection </h1> <p style="color: rgba(255,255,255,0.8); margin: 12px 0 0 0; font-size: 14px; text-transform: uppercase; letter-spacing: 2px;"> ${senderInfo.companyName} </p> </div> <!-- Content --> <div style="padding: 50px 40px;"> <p style="font-size: 18px; line-height: 1.8; color: #5a5a5a; margin: 0 0 30px 0;"> ${greeting}, </p> <div style="font-size: 16px; line-height: 1.9; color: #6a6a6a; margin: 0 0 35px 0;"> ${customContent.split('\n').map(paragraph => `<p style="margin: 0 0 20px 0;">${paragraph.trim()}</p>` ).join('')} </div> <!-- Elegant CTA --> <div style="text-align: center; margin: 45px 0;"> <a href="${cta.url}" style="background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); color: #ffffff; padding: 16px 40px; border-radius: 50px; text-decoration: none; font-weight: 500; font-size: 15px; display: inline-block; box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3); letter-spacing: 0.5px;"> ${cta.text} </a> </div> </div> <!-- Minimal Footer --> <div style="padding: 30px 40px; background: #f8f9fa; border-top: 1px solid #ecf0f1;"> <div style="text-align: center; color: #7f8c8d; font-size: 13px;"> <div style="font-weight: 600; margin-bottom: 5px;">${senderInfo.senderName}</div> <div>${senderInfo.companyName} • ${senderInfo.website}</div> </div> </div> </div> </body>
</html>`; return { subject: customSubject, body }; } /** * Cold Outreach Template - Modern Professional */ generateColdOutreach(prospect, businessAnalysis, templateData, ollamaContent) { const greeting = this.getPersonalizedGreeting(prospect); const prospectCompany = prospect.company || this.extractCompanyFromEmail(prospect.email); const cta = this.getCallToAction(templateData); const senderInfo = this.getProperSenderInfo(templateData, businessAnalysis); let customSubject = `${prospectCompany} + ${senderInfo.companyName} collaboration opportunity`; let customContent = `I've been following ${prospectCompany}'s impressive work in the industry and believe there could be significant synergies between our companies.`; if (ollamaContent && typeof ollamaContent === 'string') { const subjectMatch = ollamaContent.match(/SUBJECT:\s*(.+)/i); if (subjectMatch && subjectMatch[1].trim()) { customSubject = subjectMatch[1].trim(); } const emailMatch = ollamaContent.match(/EMAIL:\s*([\s\S]+?)(?:\n\nBest regards|$)/i); if (emailMatch && emailMatch[1].trim()) { customContent = emailMatch[1].trim() .replace(/Hi [^,]+,?\s*/i, '') .replace(/Best regards[\s\S]*$/i, '') .trim(); } } const body = `
<!DOCTYPE html>
<html>
<head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>${customSubject}</title>
</head>
<body style="margin: 0; padding: 20px; background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;"> <div style="max-width: 600px; margin: 0 auto; background: #f9f9f9; border-radius: 16px; box-shadow: 0 20px 50px rgba(0, 0, 0, 0.15); overflow: hidden;"> <!-- Professional Header --> <div style="background: linear-gradient(135deg, #5a5a5a 0%, #6a6a6a 100%); padding: 45px 35px; text-align: left; position: relative; overflow: hidden;"> <div style="position: absolute; top: -50%; right: -20%; width: 200px; height: 200px; background: rgba(255, 255, 255, 0.05); border-radius: 50%; transform: rotate(45deg);"></div> <div style="position: relative; z-index: 2;"> <h1 style="color: #333333; margin: 0 0 10px 0; font-size: 26px; font-weight: 600;"> Business Opportunity </h1> <div style="color: rgba(255,255,255,0.7); font-size: 16px;"> ${senderInfo.companyName} → ${prospectCompany} </div> </div> </div> <!-- Content --> <div style="padding: 45px 35px;"> <p style="font-size: 17px; line-height: 1.7; color: #5a5a5a; margin: 0 0 25px 0; font-weight: 500;"> ${greeting}, </p> <div style="font-size: 16px; line-height: 1.8; color: #6a6a6a; margin: 0 0 30px 0;"> ${customContent.split('\n').map(paragraph => `<p style="margin: 0 0 18px 0;">${paragraph.trim()}</p>` ).join('')} </div> <!-- Professional CTA --> <div style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 12px; padding: 30px; text-align: center; margin: 35px 0;"> <p style="color: #495057; font-size: 15px; margin: 0 0 20px 0; font-weight: 500;"> Ready to explore the possibilities? </p> <a href="${cta.url}" style="background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); color: #ffffff; padding: 14px 30px; border-radius: 8px; text-decoration: none; font-weight: 600; font-size: 15px; display: inline-block; box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);"> ${cta.text} </a> </div> </div> <!-- Professional Footer --> <div style="padding: 35px; background: #f8f9fa; border-top: 1px solid #dee2e6;"> <div style="color: #6c757d; font-size: 14px; line-height: 1.5;"> <div style="font-weight: 600; color: #495057; margin-bottom: 5px;">${senderInfo.senderName}</div> <div>${senderInfo.companyName}</div> <div style="margin-top: 10px;"> <a href="https://${senderInfo.website}" style="color: #4CAF50; text-decoration: none;">${senderInfo.website}</a> </div> </div> </div> </div> </body>
</html>`; return { subject: customSubject, body }; } /** * Value Demonstration Template - Salesforce Style */ generateValueDemonstration(prospect, businessAnalysis, templateData, ollamaContent) { const greeting = this.getPersonalizedGreeting(prospect); const prospectCompany = prospect.company || this.extractCompanyFromEmail(prospect.email); const cta = this.getCallToAction(templateData); const senderInfo = this.getProperSenderInfo(templateData, businessAnalysis); const subject = `How ${prospectCompany} could benefit from our solutions`; const body = `
<!DOCTYPE html>
<html>
<head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>${subject}</title>
</head>
<body style="margin: 0; padding: 20px; background-color: #f8fafc; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;"> <div style="max-width: 600px; margin: 0 auto; background: #f9f9f9; border-radius: 12px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05); overflow: hidden;"> <!-- Header --> <div style="background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); padding: 32px; text-align: center;"> <h1 style="color: #ffffff; margin: 0; font-size: 24px; font-weight: 600;"> Value Demonstration </h1> <p style="color: rgba(255,255,255,0.9); margin: 8px 0 0 0; font-size: 16px;"> Tailored for ${prospectCompany} </p> </div> <!-- Content --> <div style="padding: 32px;"> <p style="font-size: 16px; line-height: 1.6; color: #2d3748; margin: 0 0 16px 0;"> ${greeting}, </p> <p style="font-size: 16px; line-height: 1.6; color: #4a5568; margin: 0 0 24px 0;"> I wanted to share some specific ways ${prospectCompany} could benefit from our approach. </p> <!-- Metrics Cards --> <div style="display: table; width: 100%; margin: 24px 0;"> <div style="display: table-cell; width: 50%; padding-right: 12px; vertical-align: top;"> <div style="background: linear-gradient(135deg, #fef5e7 0%, #fed7aa 100%); border-radius: 8px; padding: 20px; text-align: center; border: 1px solid #fdba74;"> <div style="font-size: 32px; font-weight: 700; color: #ea580c; margin-bottom: 8px;"> 40% </div> <div style="font-size: 14px; color: #9a3412; font-weight: 500;"> Average Efficiency Gain </div> </div> </div> <div style="display: table-cell; width: 50%; padding-left: 12px; vertical-align: top;"> <div style="background: linear-gradient(135deg, #ecfdf5 0%, #bbf7d0 100%); border-radius: 8px; padding: 20px; text-align: center; border: 1px solid #86efac;"> <div style="font-size: 32px; font-weight: 700; color: #16a34a; margin-bottom: 8px;"> ROI </div> <div style="font-size: 14px; color: #15803d; font-weight: 500;"> Positive in 30 days </div> </div> </div> </div> <!-- Success Stories --> <div style="background: #f8fafc; border-radius: 8px; padding: 20px; margin: 24px 0; border-left: 4px solid #4299e1;"> <h3 style="color: #2d3748; margin: 0 0 12px 0; font-size: 16px; font-weight: 600;"> Companies like ${prospectCompany} have seen: </h3> <ul style="margin: 0; padding-left: 20px; color: #4a5568; font-size: 14px; line-height: 1.5;"> <li style="margin-bottom: 8px;">Streamlined operations reducing manual work by 60%</li> <li style="margin-bottom: 8px;">Improved customer satisfaction scores</li> <li>Faster decision-making with better data insights</li> </ul> </div> <!-- CTA --> <div style="text-align: center; margin: 32px 0;"> <a href="${cta.url}" style="background: #4CAF50; color: #ffffff; padding: 14px 28px; border-radius: 8px; text-decoration: none; font-weight: 600; display: inline-block; box-shadow: 0 4px 12px rgba(128, 90, 213, 0.3);"> ${cta.text} </a> <p style="color: #718096; font-size: 14px; margin: 12px 0 0 0;"> ${cta.description} </p> </div> </div> <!-- Footer --> <div style="padding: 24px 32px; background: #f7fafc; border-top: 1px solid #e2e8f0;"> <div style="text-align: left; color: #718096; font-size: 14px; line-height: 1.4;"> <div style="font-weight: 600; color: #2d3748; margin-bottom: 4px;"> ${senderInfo.senderName} </div> <div>${senderInfo.companyName}</div> <div style="margin-top: 8px;"> <a href="https://${senderInfo.website}" style="color: #4299e1; text-decoration: none;"> ${senderInfo.website} </a> </div> </div> </div> </div> </body>
</html>`; return { subject, body }; } /** * Follow-up Template - Elegant Reminder */ generateFollowUp(prospect, businessAnalysis, templateData, ollamaContent) { const greeting = this.getPersonalizedGreeting(prospect); const prospectCompany = prospect.company || this.extractCompanyFromEmail(prospect.email); const cta = this.getCallToAction(templateData); const senderInfo = this.getProperSenderInfo(templateData, businessAnalysis); let customSubject = `Following up on our ${senderInfo.companyName} conversation`; let customContent = `I wanted to follow up on my previous message regarding the potential collaboration between ${senderInfo.companyName} and ${prospectCompany}.`; if (ollamaContent && typeof ollamaContent === 'string') { const subjectMatch = ollamaContent.match(/SUBJECT:\s*(.+)/i); if (subjectMatch && subjectMatch[1].trim()) { customSubject = subjectMatch[1].trim(); } const emailMatch = ollamaContent.match(/EMAIL:\s*([\s\S]+?)(?:\n\nBest regards|$)/i); if (emailMatch && emailMatch[1].trim()) { customContent = emailMatch[1].trim() .replace(/Hi [^,]+,?\s*/i, '') .replace(/Best regards[\s\S]*$/i, '') .trim(); } } const body = `
<!DOCTYPE html>
<html>
<head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>${customSubject}</title>
</head>
<body style="margin: 0; padding: 20px; background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%); font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;"> <div style="max-width: 600px; margin: 0 auto; background: #f9f9f9; border-radius: 18px; box-shadow: 0 12px 35px rgba(0, 0, 0, 0.12); overflow: hidden;"> <!-- Warm Header --> <div style="background: linear-gradient(135deg, #4CAF50 0%, #f5f5f5 50%, #f5f5f5 100%); padding: 40px 35px; text-align: center;"> <h1 style="color: #5a5a5a; margin: 0; font-size: 22px; font-weight: 400;"> Following Up </h1> <p style="color: #555; margin: 10px 0 0 0; font-size: 15px;"> ${senderInfo.companyName} Partnership Opportunity </p> </div> <!-- Content --> <div style="padding: 40px 35px;"> <p style="font-size: 16px; line-height: 1.7; color: #5a5a5a; margin: 0 0 25px 0;"> ${greeting}, </p> <div style="font-size: 15px; line-height: 1.8; color: #6a6a6a; margin: 0 0 30px 0;"> ${customContent.split('\n').map(paragraph => `<p style="margin: 0 0 18px 0;">${paragraph.trim()}</p>` ).join('')} </div> <!-- Gentle CTA --> <div style="border-left: 4px solid #4CAF50; padding: 25px 30px; background: #fdf2f8; border-radius: 0 10px 10px 0; margin: 30px 0;"> <p style="color: #374151; font-size: 15px; margin: 0 0 15px 0;"> Still interested in exploring this opportunity? </p> <a href="${cta.url}" style="background: linear-gradient(135deg, #4CAF50 0%, #f5f5f5 100%); color: #5a5a5a; padding: 12px 25px; border-radius: 25px; text-decoration: none; font-weight: 500; font-size: 14px; display: inline-block;"> ${cta.text} </a> </div> </div> <!-- Soft Footer --> <div style="padding: 30px 35px; background: #fefefe;"> <div style="color: #6b7280; font-size: 13px; text-align: center;"> <div style="font-weight: 500; margin-bottom: 5px;">${senderInfo.senderName}</div> <div>${senderInfo.companyName} • ${senderInfo.website}</div> </div> </div> </div> </body>
</html>`; return { subject: customSubject, body }; } /** * Problem-Solution Template - Consulting Style */ generateProblemSolution(prospect, businessAnalysis, templateData, ollamaContent) { const greeting = this.getPersonalizedGreeting(prospect); const prospectCompany = prospect.company || this.extractCompanyFromEmail(prospect.email); const cta = this.getCallToAction(templateData); const senderInfo = this.getProperSenderInfo(templateData, businessAnalysis); let customSubject = `Solving ${prospectCompany}'s biggest challenge`; let customContent = `Many companies in your industry face similar challenges, and I believe ${senderInfo.companyName} has a solution that could make a significant impact for ${prospectCompany}.`; if (ollamaContent && typeof ollamaContent === 'string') { const subjectMatch = ollamaContent.match(/SUBJECT:\s*(.+)/i); if (subjectMatch && subjectMatch[1].trim()) { customSubject = subjectMatch[1].trim(); } const emailMatch = ollamaContent.match(/EMAIL:\s*([\s\S]+?)(?:\n\nBest regards|$)/i); if (emailMatch && emailMatch[1].trim()) { customContent = emailMatch[1].trim() .replace(/Hi [^,]+,?\s*/i, '') .replace(/Best regards[\s\S]*$/i, '') .trim(); } } const body = `
<!DOCTYPE html>
<html>
<head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>${customSubject}</title>
</head>
<body style="margin: 0; padding: 20px; background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;"> <div style="max-width: 600px; margin: 0 auto; background: #f9f9f9; border-radius: 15px; box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1); overflow: hidden;"> <!-- Solution-Focused Header --> <div style="background: linear-gradient(135deg, #1a202c 0%, #2d3748 100%); padding: 45px 35px; position: relative;"> <div style="position: absolute; top: 20px; right: 20px; width: 60px; height: 60px; border: 2px solid rgba(255,255,255,0.1); border-radius: 50%;"></div> <h1 style="color: #333333; margin: 0 0 15px 0; font-size: 24px; font-weight: 500;"> Strategic Solution </h1> <p style="color: rgba(255,255,255,0.8); margin: 0; font-size: 16px;"> For ${prospectCompany} </p> </div> <!-- Content --> <div style="padding: 45px 35px;"> <p style="font-size: 17px; line-height: 1.7; color: #2d3748; margin: 0 0 30px 0;"> ${greeting}, </p> <div style="font-size: 16px; line-height: 1.8; color: #4a5568; margin: 0 0 35px 0;"> ${customContent.split('\n').map(paragraph => `<p style="margin: 0 0 20px 0;">${paragraph.trim()}</p>` ).join('')} </div> <!-- Solution Box --> <div style="background: linear-gradient(135deg, #edf2f7 0%, #e2e8f0 100%); border-radius: 12px; padding: 35px; margin: 35px 0; border-left: 5px solid #4CAF50;"> <h3 style="color: #2d3748; margin: 0 0 20px 0; font-size: 18px; font-weight: 600;"> Our Approach </h3> <div style="color: #4a5568; font-size: 15px; line-height: 1.6;"> <div style="margin-bottom: 15px;"> Comprehensive analysis of your current challenges</div> <div style="margin-bottom: 15px;"> Customized solution designed for ${prospectCompany}</div> <div> Ongoing support and optimization</div> </div> </div> <!-- CTA --> <div style="text-align: center; margin: 40px 0;"> <a href="${cta.url}" style="background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); color: #ffffff; padding: 16px 32px; border-radius: 8px; text-decoration: none; font-weight: 600; font-size: 15px; display: inline-block; box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);"> ${cta.text} </a> </div> </div> <!-- Footer --> <div style="padding: 35px; background: #f7fafc; border-top: 1px solid #e2e8f0;"> <div style="color: #718096; font-size: 14px; text-align: center;"> <div style="font-weight: 600; color: #4a5568; margin-bottom: 5px;">${senderInfo.senderName}</div> <div>${senderInfo.companyName} • ${senderInfo.website}</div> </div> </div> </div> </body>
</html>`; return { subject: customSubject, body }; } /** * Extract company name from email domain */ extractCompanyFromEmail(email) { if (!email) return 'your company'; const domain = email.split('@')[1]; if (!domain) return 'your company'; // Remove common extensions and clean up const company = domain .replace(/\.(com|org|net|io|co)$/i, '') .replace(/[.-]/g, ' ') .split(' ') .map(word => word.charAt(0).toUpperCase() + word.slice(1)) .join(' '); return company || 'your company'; } /** * Generate custom subject line using Ollama (if available) */ async generateCustomSubject(prospect, businessAnalysis, campaignGoal) { const prospects = [prospect]; const company = prospect.company || this.extractCompanyFromEmail(prospect.email); const name = this.getPersonalizedGreeting(prospect).replace('Hi ', ''); // Fallback subjects based on campaign goal const fallbackSubjects = { partnership: `Partnership opportunity - ${businessAnalysis.companyName} × ${company}`, sales: `Quick question about ${company}'s growth goals`, demo: `See how ${company} could benefit from ${businessAnalysis.companyName}`, followup: `Following up on ${businessAnalysis.companyName} conversation` }; return fallbackSubjects[campaignGoal] || fallbackSubjects.partnership; }
} module.exports = ModernEmailTemplates;